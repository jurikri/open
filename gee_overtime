# In[] raw test (구버전)
if False:
    min_mean_save = []; [min_mean_save.append([]) for k in range(N)]
    ROImean_save = []; [ROImean_save.append([]) for k in range(N)]
    roiRatio = 1
    for SE in range(N):
        if not SE in grouped_total_list or SE in skiplist: # ETC 추가후 lidocine skip 삭제할것 (여러개)
    #        print(SE, 'skip')
            continue
    
        sessionNum = 5
        if SE in se3set:
            sessionNum = 3
        
        [min_mean_save[SE].append([]) for k in range(sessionNum)]
        [ROImean_save[SE].append([]) for k in range(sessionNum)]
        for se in range(sessionNum):
            current_value = []; result_mean_projects = []
            for i in range(len(model_name)): # repeat model 만큼 반복 후 평균냄
                ssw = False
                
                loadpath5 = savepath + 'result\\' + model_name[i][0] + '\\exp_raw\\' + 'PSL_result_' + str(SE) + '.pickle'
                loadpath_mean = savepath + 'result\\' + model_name[i][0] + '\\exp_raw\\' + 'PSL_result_mean_' + str(SE) + '.pickle'
                    
                if os.path.isfile(loadpath5):
                    with open(loadpath5, 'rb') as f:  # Python 3: open(..., 'rb')
                        PSL_result_save = pickle.load(f)
                    PSL_result_save2 = PSL_result_save[SE][se] # [BINS][ROI][bins] # BINS , full length 넘어갈때, # bins는 full length 안에서
                    
                    # ROI 평균처리에 대하여 및 반복처리
                    current_BINS = []
                    BINnum = len(PSL_result_save2)
                    if BINnum != 0:
                        for BINS in range(len(PSL_result_save2)):
                            current_ROI = []
                            for ROI in range(len(PSL_result_save2[BINS])):
                                sw = 'binarization'
                                if sw == 'binarization':
                                    current_ROI.append(np.argmax(PSL_result_save2[BINS][ROI], axis=1) == 1)
                                elif sw == 'probability':
                                    current_ROI.append(PSL_result_save2[BINS][ROI][:,1])
                                
                            roiRank = np.mean(np.array(current_ROI), axis=1) #[ROI, bins]
                            
                            # 상위 x % ROI 만 filtering 
                            current_ROI_rank = np.array(current_ROI)[np.argsort(roiRank)[::-1][:int(round(roiRank.shape[0]*roiRatio))], :]
                            current_BINS.append(np.mean(np.array(current_ROI_rank ), axis=0)) # ROI 평균
                        current_value.append(current_BINS)
                        # ROI 평균처리에 대하여 - 끝
                        
                if os.path.isfile(loadpath_mean):
                    with open(loadpath_mean, 'rb') as f:  # Python 3: open(..., 'rb')
                        result_mean = pickle.load(f)
                    result_mean_projects.append(np.array(result_mean[SE][se])) # [BINS][bins][nonpain,pain]
     
            if len(current_value) > 0:
                current_value = np.mean(np.array(current_value), axis=0) # mean by project
                if sw == 'binarization':
                    min_mean_save[SE][se] = current_value # [BINS][bins]
                elif sw == 'probability':
                    min_mean_save[SE][se] = current_value > 0.5 # [BINS][bins]
            elif len(current_value) == 0:
                min_mean_save[SE][se] = np.nan
                
            if np.array(result_mean_projects).shape[0] > 0:
                result_mean_projects2 = np.mean(np.array(result_mean_projects), axis=0) # mean by project
                ROImean_save[SE][se] = result_mean_projects2[:,0,1]
            elif np.array(result_mean_projects).shape[0] == 0:
                ROImean_save[SE][se] = np.nan
                   
    calc_target = np.array(min_mean_save)
    
                
    biRNN_short = np.zeros((N,5)); biRNN_short[:] = np.nan;
    for SE in range(N):
        if not SE in grouped_total_list or SE in skiplist:
    #            print(SE, 'skip')
            continue
        sessionNum = 5
        if SE in se3set:
            sessionNum = 3
            
        for se in range(sessionNum):
    #        if [SE, se] in shortlist:
            biRNN_short[SE,se]  = np.mean(calc_target[SE][se]) # [BINS][bins]
